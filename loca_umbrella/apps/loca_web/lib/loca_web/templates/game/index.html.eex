<div id="map"></div>
<button id="start-game" style="position:fixed; top:10px; left: 50%" type="button" class="start-button btn btn-primary" disabled>Choose markers</button>

<div class="modal" tabindex="-1" role="dialog" id="invitation-modal">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Share game invitation with friends</h5>
      </div>
      <div class="modal-body">
        <p><a id="invitation" href="" target="_blank"/></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUhtGqgaU9lmQtmGUN9O2fRClnSO0pe7s&callback=initMap" async defer></script>
<script>
  var markers = [];
  var map;
  var startButton = document.getElementById('start-game');
  var playerLocations = [];

  function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 54.413, lng: 18.555},
      zoom: 8
    });

    map.addListener('click', (e) => {
      placeMarker(e.latLng, map);
    });
  }
  var current;
  function placeMarker(position, map) {
    if (markers.length == 0) {
      startButton.removeAttribute('disabled');
      startButton.innerHTML = "Start game";
    }
    var marker = new google.maps.Marker({
      position: position,
      map: map
    });

    // remove marker
    marker.addListener('click', () => {
      marker.setMap(null);
      markers = markers.filter(m => {
        return m !== marker;
      });

      if (markers.length == 0) {
        startButton.setAttribute('disabled', true);
        startButton.innerHTML = "Choose markers";
      }
    });
    map.panTo(position);

    markers.push(marker);
  }

  startButton.addEventListener('click', (e) => {
    var markerObjects = markers.map(m => {
      return {
        lat: m.position.lat(),
        lng: m.position.lng(),
      }
    });

    fetch('/start_game', {
      method: 'POST',
      body: JSON.stringify(markerObjects)
    })
    .then(response => response.json())
    .then(data => {
      let invitationLink = document.getElementById("invitation");
      invitationLink.href = window.location.href + 'join/' + data.game_id;
      invitationLink.innerHTML = window.location.href + 'join/' + data.game_id;
      $('#invitation-modal').modal('show');

      let channel = socket.channel("game:" + data.game_id, {})
      channel.join();

      channel.on("player_moved", data => {
        if (playerLocations[data.name]) {
            playerLocations[data.name].setMap(null);
        } else {
          data.color = randomColor();
        }
        playerLocations[data.name] = new google.maps.Marker({
          map: map,
          position: {
            lng: data.lng,
            lat: data.lat
          },
          icon: {
              path: google.maps.SymbolPath.CIRCLE,
              fillColor: data.color,
              fillOpacity: 0.6,
              strokeColor: data.color,
              strokeOpacity: 0.9,
              strokeWeight: 1,
              scale: 7
          }
        });
      });

      channel.on("player_state_changed", data => {
        switch (data.state) {
          case 'on_point':
            window.showMessage('User ' + data.user_name + ' on point', 'alert-info');
            break;

          case 'winner':
            window.showMessage('User ' + data.user_name + ' won', 'alert-info');
            break;

          default:
            break;
          }
      });
      channel.on("player_joined", data => {
        window.showMessage('User ' + data.user_name + ' joined', 'alert-info');
      });
    });
  });

  function randomColor() {
    var x = Math.floor(Math.random() * 256);
    var y = Math.floor(Math.random() * 256);
    var z = Math.floor(Math.random() * 256);
    var color = "rgb(" + x + "," + y + "," + z + ")";
    return color;
  }
</script>
